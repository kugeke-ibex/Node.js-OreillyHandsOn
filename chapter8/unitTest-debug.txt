ユニットテストはソフトウェアテストの中で最も投資効率が高く、それゆえ最も多く書くべきものとされている。
Node.jsのユニットテストに用いられるツールは、概ね次に挙げる4種類の機能のうちの1つまたは複数を提供します。
フレームワーク
    テストコードの基本構造の記述、テストの設定、実行
アサーション
    それぞれのテストの中で、結果として得られた値が期待した値と一致するかどうかを検証する
テストダブル
    テスト対象のコードが依存モジュールやコンポーネントを任意の別のものに置き換える
カバレッジ
    テスト対象のコード全体のうち、テストコードによってカバーされている部分の割合を分析する

ユニットテストのツール構成を決める上で鍵となるのは、フレームワークの選択です。
Mochaのような軽量なフレームワークを選択した場合、アサーションやテストダブルなどについても好きなもの選択するなどの高い柔軟性がある分、
開発者による選択、設定を行う必要が多くあるので煩雑になるデメリットともあります。
一方、Jestのようにフルスタックなフレームワークを使うなら、フレームワークの仕組みに乗っかれば個別の機能を利用するツールの選択に悩む必要がありません。
また、Jestと並行してテストダブルの部分はtestdouble.jsを導入するような構成も可能です。

